// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ResturantCheckoutTest.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RestaurantCheckoutSystem")]
    public partial class RestaurantCheckoutSystemFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RestaurantCheckoutSystem", "As a restaurant worker\r\n I want my ordering system to accuratley calculate bills\r" +
                "\n So that customers are chared the correct ammount", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "RestaurantCheckoutSystem.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Standard order creation before 19:00")]
        [NUnit.Framework.CategoryAttribute("Scenario1")]
        public async System.Threading.Tasks.Task StandardOrderCreationBefore1900()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Standard order creation before 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("I have added a Starter at 18:00 with quantity 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("I have added 4 Mains at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("I have added 4 Drinks at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
    await testRunner.ThenAsync("the final total should be £55.40", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Standard order creation after 19:00")]
        [NUnit.Framework.CategoryAttribute("Scenario1")]
        public async System.Threading.Tasks.Task StandardOrderCreationAfter1900()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Standard order creation after 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
    await testRunner.GivenAsync("I have added a Starter at 18:00 with quantity 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
    await testRunner.AndAsync("I have added 4 Mains at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I have added 4 Drinks at 19:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("the final total should be £58.40", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A standard order is parially placed before 19:00 and updated after 19:00")]
        [NUnit.Framework.CategoryAttribute("Scenario2")]
        public async System.Threading.Tasks.Task AStandardOrderIsPariallyPlacedBefore1900AndUpdatedAfter1900()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A standard order is parially placed before 19:00 and updated after 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
    await testRunner.GivenAsync("I have added a Starter at 18:00 with quantity 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.AndAsync("I have added 2 Mains at 18:30", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("I have added 2 Drinks at 18:30", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
    await testRunner.AndAsync("I calculate the current the bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("the total should be £23.30", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync("I have added 2 Mains at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.AndAsync("I have added 2 Drinks at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync("the final total should be £43.70", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An order is placed before 19:00 and partially cancelled")]
        [NUnit.Framework.CategoryAttribute("Scenario3")]
        public async System.Threading.Tasks.Task AnOrderIsPlacedBefore1900AndPartiallyCancelled()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("An order is placed before 19:00 and partially cancelled", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
    await testRunner.GivenAsync("I have added a Starter at 18:00 with quantity 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
    await testRunner.AndAsync("I have added 4 Mains at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.AndAsync("I have added 4 Drinks at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("I calculate the current the bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
    await testRunner.AndAsync("the total should be £42.2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
    await testRunner.AndAsync("I remove 1 Starter", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
    await testRunner.AndAsync("I remove 1 Main", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.AndAsync("I remove 1 Drink", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
    await testRunner.ThenAsync("the final total should be £28.35", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An order is placed after 19:00 and partially cancelled")]
        [NUnit.Framework.CategoryAttribute("Scenario3")]
        public async System.Threading.Tasks.Task AnOrderIsPlacedAfter1900AndPartiallyCancelled()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("An order is placed after 19:00 and partially cancelled", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 49
    await testRunner.GivenAsync("I have added a Starter at 20:00 with quantity 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
    await testRunner.AndAsync("I have added 4 Mains at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
    await testRunner.AndAsync("I have added 4 Drinks at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
    await testRunner.AndAsync("I calculate the current the bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
    await testRunner.AndAsync("the total should be £45.2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
    await testRunner.AndAsync("I remove 1 Starter", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
    await testRunner.AndAsync("I remove 1 Main", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
    await testRunner.AndAsync("I remove 1 Drink", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
    await testRunner.ThenAsync("the final total should be £30.6", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Drinks only order creation before 19:00")]
        [NUnit.Framework.CategoryAttribute("AdditionalScenarios_drinksonly")]
        public async System.Threading.Tasks.Task DrinksOnlyOrderCreationBefore1900()
        {
            string[] tagsOfScenario = new string[] {
                    "AdditionalScenarios_drinksonly"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Drinks only order creation before 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 63
    await testRunner.GivenAsync("I have added 4 Drinks at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
    await testRunner.ThenAsync("the final total should be £7.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Drinks only order creation after 19:00")]
        [NUnit.Framework.CategoryAttribute("AdditionalScenarios_drinksonly")]
        public async System.Threading.Tasks.Task DrinksOnlyOrderCreationAfter1900()
        {
            string[] tagsOfScenario = new string[] {
                    "AdditionalScenarios_drinksonly"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Drinks only order creation after 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
    await testRunner.GivenAsync("I have added 4 Drinks at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
    await testRunner.ThenAsync("the final total should be £10.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Drinks only order creation before 19:00 with amendment afer 19:00")]
        [NUnit.Framework.CategoryAttribute("AdditionalScenarios_drinksonly")]
        public async System.Threading.Tasks.Task DrinksOnlyOrderCreationBefore1900WithAmendmentAfer1900()
        {
            string[] tagsOfScenario = new string[] {
                    "AdditionalScenarios_drinksonly"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Drinks only order creation before 19:00 with amendment afer 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 75
    await testRunner.GivenAsync("I have added 4 Drinks at 18:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 76
    await testRunner.AndAsync("I calculate the current the bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
    await testRunner.AndAsync("the total should be £7.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
    await testRunner.AndAsync("I have added 2 Drinks at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
    await testRunner.WhenAsync("I calculate the final bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
    await testRunner.ThenAsync("the final total should be £12.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
